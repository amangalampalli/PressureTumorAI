# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from src.dashboard.concurrency.image_recv import return_frame
from src.dashboard.concurrency.pressure import return_pressure
from src.dashboard.concurrency.position_recv import return_position
from src.dashboard.concurrency.network_status_recv import return_network_status
from src.dashboard.graphs.pressure_time import graphPressure

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import StringVar, Tk, Canvas, Button, PhotoImage, Label, StringVar


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def dashboard():
    window = Tk()

    window.geometry("1680x1000")
    window.configure(bg="#FFFFFF")

    canvas = Canvas(
        window,
        bg="#FFFFFF",
        height=1000,
        width=1680,
        bd=0,
        highlightthickness=0,
        relief="ridge",
    )

    canvas.place(x=0, y=0)

    banner_img = PhotoImage(file=relative_to_assets("banner.png"))
    banner = canvas.create_image(840.0, 38.0, image=banner_img)

    collectionImg = PhotoImage(file=relative_to_assets("start_collection.png"))
    collection_button = Button(
        image=collectionImg,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat",
    )
    collection_button.place(
        x=1054.5315551757811,
        y=12.782693862915096,
        width=327.7757568359375,
        height=52.000003814697266,
    )

    logoImg = PhotoImage(file=relative_to_assets("logo.png"))
    logo = canvas.create_image(40.999999999999886, 39.00000000000006, image=logoImg)

    canvas.create_text(
        68.99999999999989,
        19.000000000000057,
        anchor="nw",
        text="PressureTumorAI",
        fill="#000000",
        font=("Avenir Black", 36 * -1),
    )

    dataManageImg = PhotoImage(file=relative_to_assets("save_data.png"))
    dataManage = Button(
        image=dataManageImg,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat",
    )
    dataManage.place(
        x=1408.303466796875, y=12.782693862915096, width=251.77684020996094, height=52.0
    )

    image_previewImg = PhotoImage(file=relative_to_assets("image_preview.png"))
    image_preview = canvas.create_image(
        338.9999999999999, 276.00000000000006, image=image_previewImg
    )
    imgLabel = Label(window)
    imgLabel.place(x=34.5, y=105, width=610, height=343)

    def displayCamera():
        imgtk = return_frame()
        imgLabel.imgtk = imgtk
        imgLabel.configure(image=imgtk)
        # Repeat after an interval to capture continiously
        imgLabel.after(1, displayCamera)

    pressure_readingImg = PhotoImage(file=relative_to_assets("pressure_reading.png"))
    pressure_readingTab = canvas.create_image(
        921.9999999999999, 276.00000000000006, image=pressure_readingImg
    )

    # def graphPressure():

    outlier_detectionImg = PhotoImage(file=relative_to_assets("outlier_detection.png"))
    outlier_detection = canvas.create_image(1278.0, 688.0, image=outlier_detectionImg)

    position_dataImg = PhotoImage(file=relative_to_assets("position_data.png"))
    position_data = canvas.create_image(
        1423.0, 277.00000000000006, image=position_dataImg
    )

    connection_statusImg = PhotoImage(file=relative_to_assets("connection_status.png"))
    connection_status = canvas.create_image(
        199.0000000000001, 962.0, image=connection_statusImg
    )
    connectionValue = StringVar()
    connectionLabel = Label(window, bg="black", fg="white")
    connectionLabel.config(font=("Avenir Medium", 40))
    connectionLabel.place(x=330, y=940.0, width=50, height=50)

    def displayNetworkStatus():
        if return_network_status() == True:
            connectionValue.set("üì∂")
        else:
            connectionValue.set("‚ùå")
        connectionLabel.configure(textvariable=connectionValue)
        connectionLabel.after(500, displayNetworkStatus)

    stylus_positionImg = PhotoImage(file=relative_to_assets("stylus_position.png"))
    stylus_position = canvas.create_image(
        774.9999999999999, 962.0, image=stylus_positionImg
    )
    # positionLabel.place(x=700.0, y=940.0, width=400, height=50)
    positionValue = StringVar()
    positionLabel = Label(window, bg="black", fg="white")
    positionLabel.config(font=("Avenir Medium", 25))
    positionLabel.place(x=700.0, y=940.0, width=400, height=50)

    def displayPosition():
        positionValue.set(return_position())
        positionLabel.configure(textvariable=positionValue)
        positionLabel.after(500, displayPosition)

    main_graphImg = PhotoImage(file=relative_to_assets("main_graph.png"))
    main_graph = canvas.create_image(439.9999999999999, 688.0, image=main_graphImg)

    pressureImg = PhotoImage(file=relative_to_assets("pressureImg.png"))
    pressure = canvas.create_image(1417.0, 962.0, image=pressureImg)
    pressureValue = StringVar()
    pressureLabel = Label(window, bg="black", fg="white")
    pressureLabel.config(font=("Avenir Medium", 25))
    pressureLabel.place(x=1470.0, y=940.0, width=190, height=50)

    def displayPressure():
        pressureValue.set(return_pressure())
        pressureLabel.configure(textvariable=pressureValue)
        pressureLabel.after(500, displayPressure)

    displayNetworkStatus()
    displayPosition()
    displayPressure()
    displayCamera()

    window.resizable(False, False)
    window.mainloop()


if __name__ == "__main__":
    dashboard()
